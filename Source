import urllib.parse
import requests

main_api = "https://www.mapquestapi.com/directions/v2/route?" #API used
key = "HcGh7zfejg2Ph6dRlkM9TH49LlbFiYok" #key used in using the API

while True:
    orig = input("Starting Location: ") #asks user for starting location
    if orig == "quit" or orig == "q":
        break
    dest = input("Destination: ") #asks user for destination
    if dest == "quit" or dest == "q":
        break
    url = main_api + urllib.parse.urlencode({"key":key, "from":orig, "to": dest})
    print("URL: " +(url))
    json_data = requests.get(url).json() #retrieves from json file
    json_status = json_data["info"]["statuscode"] #gets status code
    if json_status == 0:
        print("API Status: " + str(json_status) + " = A successful route call .\n") #displays status code when route call is successful
        print("=============================================")
        print("Directions from " + (orig) + " to " + (dest)) #display the start location and destination
        print("Trip Duration: " + (json_data["route"]["formattedTime"])) #displays trip duration
        print("Miles: " + str("{:.2f}".format(json_data["route"]["distance"]))) #displays distance in Miles
        print("Kilometers: " + str("{:.2f}".format((json_data["route"]["distance"]) * 1.61))) #converts Miles to Kilometers and display the output 
        print("Fuel Used (Ltr): " + str("{:.2f}".format((json_data["route"]["fuelUsed"])* 3.78))) #converts Gallon to Liter and display the output 
        print("Toll Road Present?: " + str(json_data["route"]["hasTollRoad"])) #Display True if there is a toll road in the route or False if not
        if str(json_data["route"]["hasTollRoad"]) == "True": #Conditional Statement checking if the Route has a toll road
            Toll = input("Enter Measurement: ") #asks user to enter measurement for computation
            if Toll == "Miles" or Toll == "miles": #conditional statement if user entered Miles or miles
                print("Toll Fee: $ " + str(json_data["route"]["distance"] * 0.06)) #display Toll fee in Miles
            elif Toll == "Kilometers" or Toll == "kilometers": #conditional statement if user entered Kilometers or kilometers
                print ("Toll Fee: $ " + str("{:.2f}".format((json_data["route"]["distance"] *0.06) * 1.61))) #display Toll fee in Kilometers
            elif Toll == "Meters" or Toll == "meters": #conditional statement if user entered Meters or meters
                print("Toll Fee: $ " + str("{:.2f}".format((json_data["route"]["distance"] * 0.06)*1609.34))) #display Toll fee in Meters
            else:
                print("Incorrect Measurement") #error handling when entered measurement is incorrect
        print("=============================================")
        for each in json_data["route"]["legs"][0]["maneuvers"]:
            print((each["narrative"]) + " (" + str("{:.2f}".format((each["distance"])*1609.34) + " m)")) #convert distance to meters and displays it
        print("=============================================\n")
    elif json_status == 402:
        print("*********************************************")
        print("Status Code: " + str(json_status) + "; Invalid user inputs for one or both locations.") #error handling when user input is invalid
        print("*********************************************\n")
    elif json_status == 611:
        print("*********************************************")
        print("Status Code: " + str(json_status) + "; Missing an entry for one or both") #error handling when user input is blank
        print("*********************************************\n")
    else:
        print("*********************************************")
        print("For Status Code: " + str(json_status) + "; Refer to:")
        print("https://developer.mapquest.com/documentation/directions-api/status-codes") #link to the list of codes
        print("*********************************************\n")
